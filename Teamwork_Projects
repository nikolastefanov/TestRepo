using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;



namespace _05_Teamwork_Projects
{
    class Program
    {
        static void Main(string[] args)
        {
            List<Team> teams = new List<Team>();

            int teamCount = int.Parse(Console.ReadLine());

            for (int i = 0; i < teamCount; i++)
            {
                string[] splitInput = Console.ReadLine()
                    .Split("-")
                    .ToArray();

                string creatorName = splitInput[0];
                string teamName = splitInput[1];

                bool isTeamNameExist = teams
                    .Select(x => x.Name)
                    .Contains(teamName);

                bool isCreatorNameExist = teams
                    .Any(x => x.CreatorName == creatorName);

                if (isTeamNameExist==false && isCreatorNameExist==false)
                {
                    Team team = new Team(teamName, creatorName);
                    teams.Add(team);
                    Console.WriteLine("Team {0} has been created by {1}!", teamName, creatorName);
                }
                else if (isTeamNameExist)
                {
                    Console.WriteLine("Team {0} was already created!", teamName);
                }
                else if (isCreatorNameExist)
                {
                    // pe4ata e greshen
                    //Console.WriteLine("Team {0} was already created!", teamName);
                    Console.WriteLine("{0} cannot create another team!",creatorName);
                }
            }
            while (true)
            {
                string input = Console.ReadLine();

                if (input== "end of assignment")
                {
                    break;
                }

                string[] splitInput = input
                    .Split(new string[] { "->" },StringSplitOptions.RemoveEmptyEntries)
                    .ToArray();

                string user = splitInput[0];
                string teamName = splitInput[1];

                bool isTeamExist = teams
                    .Any(x => x.Name == teamName);
                bool isAlreadyMember = teams.Any(x => x.Members.Contains(user));

                if (isTeamExist==false)
                {
                    Console.WriteLine("Team {0} does not exist!", teamName);
                    continue;
                }
                if (isAlreadyMember)
                {
                    Console.WriteLine("Member {0} cannot join team {1}!", user, teamName);
                    continue;
                }
                if (isTeamExist && isAlreadyMember==false)
                {
                    int indexOfTeam = teams
                        .FindIndex(x => x.Name == teamName);
                    teams[indexOfTeam].Members.Add(user);

                   // Console.WriteLine("Team {0} has been created by {1}!", teamName, user);
                }
            }

            List<Team> teamsWithMembers=teams
                .Where(x=>x.Members.Count>0)
                .OrderByDescending(x=>x.Members.Count)
                .ThenBy(x => x.Name)
                .ToList();

            List<Team> teamsWithhoutMembers=teams
                .Where(x=>x.Members.Count==0)
                .OrderBy(x=>x.Name)
                .ToList();

            foreach (var team in teamsWithMembers)
            {
                Console.WriteLine(team.Name);
                Console.WriteLine("- {0}",team.CreatorName);

                foreach (var x in team.Members)
                {
                    Console.WriteLine("-- {0}",x);
                } 
            }

            Console.WriteLine("Teams to disband:");

            foreach (var team in teamsWithhoutMembers)
            {
                Console.WriteLine(team.Name);
            }

        }

        class Team
        {
            public Team(string name,string creatorName)
            {
                Name = name;
                CreatorName = creatorName;
                Members = new List<string>();
            }
            public string Name { get; set; }
            public string CreatorName { get; set; }
            public List<string> Members { get; set; }
        }
    }
}
